# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Entity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, entity_name: str=None, start_position: int=None, end_position: int=None):  # noqa: E501
        """Entity - a model defined in Swagger

        :param entity_name: The entity_name of this Entity.  # noqa: E501
        :type entity_name: str
        :param start_position: The start_position of this Entity.  # noqa: E501
        :type start_position: int
        :param end_position: The end_position of this Entity.  # noqa: E501
        :type end_position: int
        """
        self.swagger_types = {
            'entity_name': str,
            'start_position': int,
            'end_position': int
        }

        self.attribute_map = {
            'entity_name': 'entity_name',
            'start_position': 'start_position',
            'end_position': 'end_position'
        }

        self._entity_name = entity_name
        self._start_position = start_position
        self._end_position = end_position

    @classmethod
    def from_dict(cls, dikt) -> 'Entity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Entity of this Entity.  # noqa: E501
        :rtype: Entity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_name(self) -> str:
        """Gets the entity_name of this Entity.

        название сущности, к которой относится метка.  # noqa: E501

        :return: The entity_name of this Entity.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name: str):
        """Sets the entity_name of this Entity.

        название сущности, к которой относится метка.  # noqa: E501

        :param entity_name: The entity_name of this Entity.
        :type entity_name: str
        """
        if entity_name is None:
            raise ValueError("Invalid value for `entity_name`, must not be `None`")  # noqa: E501

        self._entity_name = entity_name

    @property
    def start_position(self) -> int:
        """Gets the start_position of this Entity.

        абсолютная стартовая позиция в тексте.  # noqa: E501

        :return: The start_position of this Entity.
        :rtype: int
        """
        return self._start_position

    @start_position.setter
    def start_position(self, start_position: int):
        """Sets the start_position of this Entity.

        абсолютная стартовая позиция в тексте.  # noqa: E501

        :param start_position: The start_position of this Entity.
        :type start_position: int
        """
        if start_position is None:
            raise ValueError("Invalid value for `start_position`, must not be `None`")  # noqa: E501

        self._start_position = start_position

    @property
    def end_position(self) -> int:
        """Gets the end_position of this Entity.

        абсолютная окончательная позиция в тексте.  # noqa: E501

        :return: The end_position of this Entity.
        :rtype: int
        """
        return self._end_position

    @end_position.setter
    def end_position(self, end_position: int):
        """Sets the end_position of this Entity.

        абсолютная окончательная позиция в тексте.  # noqa: E501

        :param end_position: The end_position of this Entity.
        :type end_position: int
        """
        if end_position is None:
            raise ValueError("Invalid value for `end_position`, must not be `None`")  # noqa: E501

        self._end_position = end_position
